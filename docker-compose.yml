version: '3.8'

services:
  web:
    build:
      context: ./services/web
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_URL=http://api:8000
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - api
    networks:
      - appsmith-network
    volumes:
      - web-data:/app/.next/cache
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/appsmith
      - JWT_SECRET=${JWT_SECRET}
      - WORKER_URL=http://worker:8080
      - BRIDGE_URL=http://bridge:9000
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    networks:
      - appsmith-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  worker:
    build:
      context: ./services/worker
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/appsmith
      - REDIS_URL=redis://redis:6379
      - AI_API_KEY=${AI_API_KEY}
    depends_on:
      - db
      - redis
    networks:
      - appsmith-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  bridge:
    build:
      context: ./services/bridge
      dockerfile: Dockerfile
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
      - "9002:9002"
    environment:
      - NODE_ENV=production
      - HTTP_PORT=9000
      - WS_PORT=9001
      - GRPC_PORT=9002
      - API_URL=http://api:8000
    depends_on:
      - api
    networks:
      - appsmith-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  db:
    image: postgres:15-alpine
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=appsmith
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./services/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - appsmith-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - appsmith-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M

networks:
  appsmith-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  web-data: